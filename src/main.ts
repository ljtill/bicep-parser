import { spawn } from 'child_process'
import https from 'https'
import fs from 'fs'

import { Definitions } from './definition'
import { Resource } from './resource'
import { Template } from './template'

function validateDependencies(): void {
    const command = spawn('bicep', ['--version'])

    command.stdout.on('data', (data) => {
        // TODO: Debug mode
        // console.log(`${data}`)
    })

    command.stderr.on('data', (data) => {
        console.error(`${data}`)
        process.exit(1)
    })

    return
}

function buildBicepFile(filePath: string): Promise<Template> {
    testFilePath(filePath)

    return new Promise((resolve) => {
        const cmd = spawn('bicep', ['build', filePath, '--stdout'])
        let template: string = ''

        cmd.stdout.on('data', chunk => {
            // TODO: Debug mode
            console.log(`${chunk}`)
            template += chunk
        })
        cmd.stderr.on('data', (data) => {
            // TODO: Replace with `reject`
            console.error(`${data}`)
            process.exit(1)
        })
        cmd.on('close', (close) => {
            resolve(JSON.parse(template))
        })
    })
}

function testFilePath(filePath: string): void {
    if (!fs.existsSync(filePath)) {
        console.error('Application terminated - File path does not exist')
        process.exit(1)
    }
}

async function getResourceDefinitions(): Promise<Definitions> {
    const url = "https://raw.githubusercontent.com/Azure/azure-resource-manager-schemas/main/schemas/common/autogeneratedResources.json"

    return new Promise((resolve) => {
        https.get(url, res => {
            let body: string = ''
            res.on('data', chunk => {
                body += chunk
            })
            res.on('error', (error) => {
                // TODO: Implement with `reject`
            })
            res.on('end', () => {
                resolve(JSON.parse(body))
            })
        })
    })
}

function parseResourceDefinitions(definitions: Definitions): Resource[] {
    // TODO: Handle inconsistencies
    const refs = definitions.allOf[1].oneOf
    let resources: Resource[] = []

    refs.forEach(definition => {
        const definitionUrl = definition.$ref

        // NOTE: Validate if resource is a child resource
        if (definitionUrl.split('/')[7].includes('_')) {
            resources.push({
                namespace: definitionUrl.split('/')[5].replace('.json#', ''),
                type: definitionUrl.split('/')[7].split('_')[0],
                apiVersion: definitionUrl.split('/')[4],
                childResource: {
                    type: definitionUrl.split('/')[7].split('_')[1]
                }
            })
        } else {
            resources.push({
                namespace: definitionUrl.split('/')[5].replace('.json#', ''),
                type: definitionUrl.split('/')[7],
                apiVersion: definitionUrl.split('/')[4],
            })
        }

        // TODO: Debug - Enable logging
        // for(const resource of resources) {
        //     console.log(`Namespace: ${resource.namespace}`)
        //     console.log(`Type: ${resource.type}`)
        //     console.log(`ApiVersion: ${resource.apiVersion}`)
        //     if (resource.childResource) {
        //         console.log(`ChildResource: true`)
        //         console.log(`Type: ${resource.childResource?.type}`)
        //     } else {
        //         console.log(`ChildResource: false`)
        //     }
        //     console.log(`\n`)
        // }
    })

    const sortResources = (resourceFirst: Resource, resourceSecond: Resource) => {
        if (resourceFirst.namespace < resourceSecond.namespace) {
            return -1
        }
        if (resourceFirst.namespace > resourceSecond.namespace) {
            return 1
        }
        return 0
    }

    return resources.sort(sortResources)
}

// TODO: Iterate through resources
// function checkProviderVersion(resource: Resource): void { }

// TODO: Display resource with current and new version
// function displayResource(): void { }

async function main() {
    validateDependencies()

    // buildBicepFile('./main.bicep')
    const template = await buildBicepFile('./main.bicep')
    console.log(`${template}`)

    // TODO: Parse file path argument

    // const resources = parseResourceDefinitions(await getResourceDefinitions())
}

main()