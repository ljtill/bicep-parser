import https from 'https'

import { ResourceDefinitions } from './schema'
import { Resource } from './resource'

// TODO: Validate local env
// function vaidateRuntime(): void { }

// TODO: Build file with stdout
// function buildFile(): void { }

// REF: https://github.com/Azure/azure-resource-manager-schemas
async function getResourceDefinitions(): Promise<ResourceDefinitions> {
    const url = "https://raw.githubusercontent.com/Azure/azure-resource-manager-schemas/main/schemas/common/autogeneratedResources.json"

    return new Promise((resolve) => {
        https.get(url, res => {
            let data: string = ''
            res.on('data', chunk => {
                data += chunk
            })
            res.on('end', () => {
                resolve(JSON.parse(data))
            })
        })
    })
}

function parseResourceDefinitions(definitions: ResourceDefinitions): Resource[] {
    // TODO: Handle inconsistencies
    const refs = definitions.allOf[1].oneOf
    let resources: Resource[] = []

    refs.forEach(definition => {
        const definitionUrl = definition.$ref

        // NOTE: Validate if resource is a child resource
        if (definitionUrl.split('/')[7].includes('_')) {
            resources.push({
                namespace: definitionUrl.split('/')[5].replace('.json#', ''),
                type: definitionUrl.split('/')[7].split('_')[0],
                apiVersion: definitionUrl.split('/')[4],
                childResource: {
                    type: definitionUrl.split('/')[7].split('_')[1]
                }
            })
        } else {
            resources.push({
                namespace: definitionUrl.split('/')[5].replace('.json#', ''),
                type: definitionUrl.split('/')[7],
                apiVersion: definitionUrl.split('/')[4],
            })
        }

        // TODO: Debug - Enable logging
        // for(const resource of resources) {
        //     console.log(`Namespace: ${resource.namespace}`)
        //     console.log(`Type: ${resource.type}`)
        //     console.log(`ApiVersion: ${resource.apiVersion}`)
        //     if (resource.childResource) {
        //         console.log(`ChildResource: true`)
        //         console.log(`Type: ${resource.childResource?.type}`)
        //     } else {
        //         console.log(`ChildResource: false`)
        //     }
        //     console.log(`\n`)
        // }
    })

    const sortResources = (resourceFirst: Resource, resourceSecond: Resource) => {
        if (resourceFirst.namespace < resourceSecond.namespace) {
            return -1
        }
        if (resourceFirst.namespace > resourceSecond.namespace) {
            return 1
        }
        return 0
    }

    return resources.sort(sortResources)
}

// TODO: Iterate through resources
// function checkProviderVersion(resource: Resource): void { }

// TODO: Display resource with current and new version
// function displayResource(): void { }

async function main() {
    const resources = parseResourceDefinitions(await getResourceDefinitions())
}

main()